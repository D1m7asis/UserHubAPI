name: CI Pipeline

on: [push, pull_request]

env:
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  POSTGRES_DB: users_db
  DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/users_db

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install project dependencies
        run: |
          poetry install --with dev --no-interaction --no-root
          poetry add psycopg2-binary --group dev

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -U $POSTGRES_USER -d $POSTGRES_DB; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL... Attempt $i"
            sleep 3
          done
          echo "PostgreSQL not ready after 30 seconds"
          exit 1

      - name: Run database migrations
        run: |
          poetry run alembic upgrade head

      - name: Diagnostic info
        run: |
          echo "üì¶ Python version: $(python --version)"
          echo "üîß Poetry version: $(poetry --version)"
          echo "üóÑÔ∏è Database version: $(PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -tAc "SELECT version()")"
          echo "üìú Database tables:"
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -c "\dt"

      - name: Find test files
        id: find-tests
        run: |
          # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫ –≤ output
          TEST_FILES=$(find tests -name "test_*.py" | tr '\n' ' ')
          echo "test_files=${TEST_FILES}" >> $GITHUB_OUTPUT
          echo "Found test files: ${TEST_FILES}"

      - name: Run tests sequentially
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ –º–∞—Å—Å–∏–≤
          IFS=' ' read -ra TEST_FILE_ARRAY <<< "${{ steps.find-tests.outputs.test_files }}"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—á–µ—Ä–µ–¥–∏
          for test_file in "${TEST_FILE_ARRAY[@]}"; do
            if [ -n "$test_file" ]; then
              echo "üöÄ Running tests in: $test_file"
              poetry run pytest -v --cov=src --cov-append "$test_file"
              if [ $? -ne 0 ]; then
                echo "‚ùå Tests failed in $test_file"
                exit 1
              fi
            fi
          done

      - name: Generate coverage report
        run: |
          poetry run coverage xml
          poetry run coverage report

      - name: Upload coverage to Codecov
        if: success() || failure()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests